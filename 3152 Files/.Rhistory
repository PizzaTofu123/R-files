pbinom(5,10,1/2)
pbinom(6,10,1/2)
pbinom(7,10,1/2)
pbinom(8,10,1/2)
#3.3
binom.test(x = 176, n = 240, p = 1/2)
#3.4
z = -3.9226
p = 2*pnorm(-abs(z))
print(p)
#3.2
m = 176
n = 240
theta.hat = m/n
theta.0 = 1/2
z.0 = (theta.hat - theta.0) / sqrt(theta.0*(1-theta.0)/n)
p = 2*pnorm(-abs(z))
p
#3.2
m = 176
n = 240
theta.hat = m/n
theta.0 = 1/2
z.0 = (theta.hat - theta.0) / sqrt(theta.0*(1-theta.0)/n)
p = 2*pnorm(-abs(z.0))
p
#3.4
z = -3.9226
p = 2*pnorm(-abs(z))
print(p)
z.0 = (theta.hat - theta.0) / sqrt(theta.0*(1-theta.0)/n)
z.1 = 0.2333/0.0327
#3.2
m = 176
n = 240
theta.hat = m/n
theta.0 = 1/2
z.0 = (theta.hat - theta.0) / sqrt(theta.0*(1-theta.0)/n)
z.1 = 0.2333/0.0327
p = 2*pnorm(-abs(z.0))
p
#3.3
binom.test(x = 176, n = 240, p = 1/2)
#3.4
z = -3.9226
p = 2*pnorm(-abs(z))
print(p)
#3.2
m = 176
n = 240
theta.hat = m/n
theta.0 = 1/2
z.0 = (theta.hat - theta.0) / sqrt(theta.0*(1-theta.0)/n)
z.1 = 0.2333/0.0327
p = 2*pnorm(-abs(z.0))
p
z.1 = 0.2333/0.0327
z.1
#3.4
z = -3.9226
p = 2*pnorm(-abs(z))
print(p)
#2.1
calcP <- function(v,r) # function used to calculate the probability of each probability
# takes in the v and r variables as input
{
y <- c(0:25)
p = choose(y+r-1,y) * (r ** r) * (exp(v) + r)**(-r-y)*exp(y*v) # the formula used to calculate p
}
y <- c(0:25) # initialize y as a collection from 0 to 25
plot(y,calcP(0,1),type ='l', col = 'red', xlab = 'Number of tails', ylab ='Probability',
main = 'Plot of the negative binomial probability mass function') # plotting
lines(y,calcP(1,2),col = 'black')
lines(y,calcP(1.5,2), col = 'blue')
legend("topright", legend=c("v = 0, r = 1", "v = 1, r = 2", "v = 1.5, 2"),
col=c("red", "black", "blue"), lty=1:2, cex=0.8)
#3.2
m = 176 # number of successes
n = 240 # total number of test
theta.hat = m/n # the sample mean
theta.0 = 1/2 # the null hypothesis sample mean
z.0 = (theta.hat - theta.0) / sqrt(theta.0*(1-theta.0)/n) # the z score
p = 2*pnorm(-abs(z.0))
p
w <-c(9, 16, “monkey”)
w <-c(9, 16, "monkey")
class(w)
iris
i = iris
iris #
library(tree)
library(e1071)
library(ROCR)
library(rpart)
library(ggplot2)
#install.packages("gridExtra")
library("gridExtra") # used to arrange ggplots
#install.packages("adabag")
library(adabag)
install.packages("caret")
#install.packages("adabag")
library(adabag)
#install.packages("adabag")
library(adabag)
#install.packages("adabag")
library(caret)
library(adabag)
install.packages(c("bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "checkmate", "class", "cli", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "flexmix", "forcats", "foreign", "fs", "gargle", "glmnet", "googledrive", "googlesheets4", "gtable", "haven", "highr", "Hmisc", "hms", "htmltools", "httr", "igraph", "isoband", "jsonlite", "KernSmooth", "knitr", "lattice", "lubridate", "maps", "markdown", "MASS", "Matrix", "mclust", "mgcv", "modelr", "nlme", "nnet", "openssl", "processx", "ps", "purrr", "Rcpp", "RcppEigen", "readr", "readxl", "rmarkdown", "rpart", "sass", "spatial", "stringi", "survival", "sys", "tibble", "tidyverse", "tinytex", "utf8", "viridis", "viridisLite", "vroom", "waldo", "xfun", "xml2", "yaml"))
#install.packages("adabag")
library(caret)
library(adabag)
library(adabag)
#install.packages("adabag")
library(tibble)
library(adabag)
install.packages("tibble")
library(adabag)
install.packages("tibble")
library(adabag)
library(rpart)
library(adabag)
install.packages("adabag")
library(adabag)
library(caret)
library(tidyverse)
install.packages("tibble")
library(e1071)
library(ROCR)
library(rpart)
library(tree)
library(e1071)
library(ROCR)
library(rpart)
library(ggplot2)
#install.packages("gridExtra")
library("gridExtra") # used to arrange ggplots
#install.packages("adabag")
library(tibble)
library(adabag)
bagging
library(tree)
library(e1071)
library(ROCR)
library(rpart)
library(ggplot2)
#install.packages("gridExtra")
library("gridExtra") # used to arrange ggplots
#install.packages("adabag")
library(adabag)
#install.packages("randomForest")
library(randomForest)
setwd("D:/Desktop/R files/3152 Files")
rm(list = ls())
WAUS <- read.csv("HumidPredict2023D.csv")
L <- as.data.frame(c(1:49))
set.seed(32210213) # Your Student ID is the random seed
L <- L[sample(nrow(L), 10, replace = FALSE),] # sample 10 locations
WAUS <- WAUS[(WAUS$Location %in% L),]
WAUS <- WAUS[sample(nrow(WAUS), 2000, replace = FALSE),] # sample 2000 rows
# Q1
#proportion of days where it is more humid tomorrow compared to it is lesser
more_humid = WAUS[WAUS$MHT == 1,]
dim(more_humid) # 946 rows
WAUS$WindDir3pm = as.factor(WAUS$WindDir3pm)
WAUS$WindDir9am = as.factor(WAUS$WindDir9am)
WAUS$RainToday = as.factor(WAUS$RainToday)
WAUS$WindGustDir = as.factor(WAUS$WindGustDir)
WAUS$MHT = as.factor(WAUS$MHT)
#Description of the predictors
for (i in 1:ncol(WAUS)){
print(colnames(WAUS)[i])
print(summary(WAUS[,i]))
}
p1 = ggplot(data.frame(WAUS), aes(x = WindGustDir)) + geom_bar()
p2 = ggplot(data.frame(WAUS), aes(x = WindDir9am)) + geom_bar()
p3 = ggplot(data.frame(WAUS), aes(x = WindDir3pm)) + geom_bar()
p4 = ggplot(data.frame(WAUS), aes(x = RainToday)) + geom_bar()
grid.arrange(p1, p2, p3, p4, ncol = 2, nrow = 2)
#Next we exclude Year and location
WAUS = WAUS[-c(1:2)]
WAUS
#Q2
#Replacing the NA values of
#Evaporation, Sunshine, pressure9am, pressure3pm, Cloud9am, Cloud3pm
WAUS$Evaporation[is.na(WAUS$Evaporation)] = mean(WAUS$Evaporation, na.rm = TRUE)
WAUS$Sunshine[is.na(WAUS$Sunshine)] = mean(WAUS$Sunshine, na.rm = TRUE)
WAUS$Cloud9am[is.na(WAUS$Cloud9am)] = mean(WAUS$Cloud9am, na.rm = TRUE)
WAUS$Cloud3pm[is.na(WAUS$Cloud3pm)] = mean(WAUS$Cloud3pm, na.rm = TRUE)
WAUS$Pressure9am[is.na(WAUS$Pressure9am)] = mean(WAUS$Pressure9am, na.rm = TRUE)
WAUS$Pressure3pm[is.na(WAUS$Pressure3pm)] = mean(WAUS$Pressure3pm, na.rm = TRUE)
# removing the rest of the NA values
comp = complete.cases(WAUS)
WAUS = WAUS[comp,]
# checking what is left of the dataset
dim(WAUS)
#Q3
#Splitting the dataset to train and test data sets
set.seed(32210213) #Student ID as random seed
train.row = sample(1:nrow(WAUS), 0.7*nrow(WAUS))
WAUS.train = WAUS[train.row,]
WAUS.test = WAUS[-train.row,]
dim(WAUS.train)
dim(WAUS.test)
#11
#install.packages("neuralnet")
library(neuralnet)
library(car)
ann.WAUS.train = WAUS.train
ann.WAUS.test = WAUS.test
ann.WAUS.trainmm = as.data.frame(model.matrix(~WindDir3pm+WindDir9am+RainToday+WindGustDir+MHT, data = ann.WAUS.train))
ann.WAUS.testmm = as.data.frame(model.matrix(~WindDir3pm+WindDir9am+RainToday+WindGustDir+MHT, data = ann.WAUS.test))
ann.WAUS.train = cbind(ann.WAUS.train,ann.WAUS.trainmm)
ann.WAUS.test = cbind(ann.WAUS.test,ann.WAUS.testmm)
ann.WAUS.test
ann.WAUS.train = ann.WAUS.train[,c(1:5,7,10:17,19,20,22:(ncol(ann.WAUS.train)-1))]
ann.WAUS.test = ann.WAUS.test[,c(1:5,7,10:17,19,20,22:(ncol(ann.WAUS.test)-1))]
ann.WAUS.test
ann = neuralnet(MHT~WindDir9am+WindGustDir+WindDir3pm+Temp9am+Rainfall, ann.WAUS.train, hidden = 6)
ann = neuralnet(MHT ~ WindDir9am+WindGustDir+WindDir3pm+Temp9am+Rainfall, data = ann.WAUS.train, hidden = 6)
rm(list = ls())
#install.packages("neuralnet")
library(neuralnet)
options(digits=4)
pttrainread <- read.csv("playtennistrainTF.csv")
pttestread <- read.csv("playtennistestTF.csv")
ptcombined = rbind(pttrainread,pttestread)
ptcombined
ptmm = model.matrix(~Outlook+Temperature+Humidity+Wind, data=ptcombined)
ptcombined = cbind(ptcombined,ptmm)
ptcombined
ptcombined = ptcombined[,c(1, 8, 9, 10, 11, 12, 13, 6)]
pttest = ptcombined[15:20,]
pttrain = ptcombined[1:14,]
set.seed(9999) #random seed
#resampling with replacement to create a larger training set
pttrain = pttrain[sample(nrow(pttrain), 100, replace = TRUE),]
pttrain = as.data.frame(pttrain)
PT.nn = neuralnet(Play~ OutlookRain + OutlookSunny + TemperatureHot +TemperatureMild+ HumidityNormal + WindWeak, pttrain, hidden=1)
PT.nn$result.matrix
PT.pred = compute(PT.nn, pttest[,2:7])
PT.predr = round(PT.pred$net.result,0)
table(observed = pttest$Play, predicted = PT.predr)
ann = neuralnet(MHT ~ WindDir9am+WindGustDir+WindDir3pm+Temp9am+Rainfall, data = ann.WAUS.train, hidden = 6)
library(tree)
library(e1071)
library(ROCR)
library(rpart)
library(ggplot2)
#install.packages("gridExtra")
library("gridExtra") # used to arrange ggplots
#install.packages("adabag")
library(adabag)
#install.packages("randomForest")
library(randomForest)
setwd("D:/Desktop/R files/3152 Files")
rm(list = ls())
WAUS <- read.csv("HumidPredict2023D.csv")
L <- as.data.frame(c(1:49))
set.seed(32210213) # Your Student ID is the random seed
L <- L[sample(nrow(L), 10, replace = FALSE),] # sample 10 locations
WAUS <- WAUS[(WAUS$Location %in% L),]
WAUS <- WAUS[sample(nrow(WAUS), 2000, replace = FALSE),] # sample 2000 rows
# Q1
#proportion of days where it is more humid tomorrow compared to it is lesser
more_humid = WAUS[WAUS$MHT == 1,]
dim(more_humid) # 946 rows
WAUS$WindDir3pm = as.factor(WAUS$WindDir3pm)
WAUS$WindDir9am = as.factor(WAUS$WindDir9am)
WAUS$RainToday = as.factor(WAUS$RainToday)
WAUS$WindGustDir = as.factor(WAUS$WindGustDir)
WAUS$MHT = as.factor(WAUS$MHT)
#Description of the predictors
for (i in 1:ncol(WAUS)){
print(colnames(WAUS)[i])
print(summary(WAUS[,i]))
}
#Next we exclude Year and location
WAUS = WAUS[-c(1:2)]
WAUS
#Q2
#Replacing the NA values of
#Evaporation, Sunshine, pressure9am, pressure3pm, Cloud9am, Cloud3pm
WAUS$Evaporation[is.na(WAUS$Evaporation)] = mean(WAUS$Evaporation, na.rm = TRUE)
WAUS$Sunshine[is.na(WAUS$Sunshine)] = mean(WAUS$Sunshine, na.rm = TRUE)
WAUS$Cloud9am[is.na(WAUS$Cloud9am)] = mean(WAUS$Cloud9am, na.rm = TRUE)
WAUS$Cloud3pm[is.na(WAUS$Cloud3pm)] = mean(WAUS$Cloud3pm, na.rm = TRUE)
WAUS$Pressure9am[is.na(WAUS$Pressure9am)] = mean(WAUS$Pressure9am, na.rm = TRUE)
WAUS$Pressure3pm[is.na(WAUS$Pressure3pm)] = mean(WAUS$Pressure3pm, na.rm = TRUE)
# removing the rest of the NA values
comp = complete.cases(WAUS)
WAUS = WAUS[comp,]
# checking what is left of the dataset
dim(WAUS)
#Q3
#Splitting the dataset to train and test data sets
set.seed(32210213) #Student ID as random seed
train.row = sample(1:nrow(WAUS), 0.7*nrow(WAUS))
WAUS.train = WAUS[train.row,]
WAUS.test = WAUS[-train.row,]
dim(WAUS.train)
dim(WAUS.test)
#11
#install.packages("neuralnet")
library(neuralnet)
library(car)
ann.WAUS.train = WAUS.train
ann.WAUS.test = WAUS.test
ann.WAUS.trainmm = as.data.frame(model.matrix(~WindDir3pm+WindDir9am+RainToday+WindGustDir+MHT, data = ann.WAUS.train))
ann.WAUS.testmm = as.data.frame(model.matrix(~WindDir3pm+WindDir9am+RainToday+WindGustDir+MHT, data = ann.WAUS.test))
ann.WAUS.train = cbind(ann.WAUS.train,ann.WAUS.trainmm)
ann.WAUS.test = cbind(ann.WAUS.test,ann.WAUS.testmm)
ann.WAUS.test
ann.WAUS.train = ann.WAUS.train[,c(1:5,7,10:17,19,20,22:(ncol(ann.WAUS.train)-1))]
ann.WAUS.test = ann.WAUS.test[,c(1:5,7,10:17,19,20,22:(ncol(ann.WAUS.test)-1))]
ann.WAUS.test
ann = neuralnet(MHT ~ WindDir9am+WindGustDir+WindDir3pm+Temp9am+Rainfall, data = ann.WAUS.train, hidden = 6)
ann.WAUS.train
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 6)
ann.pred = compute(ann, ann.WAUS.test)
ann.pred
ann.pred = as.data.frame(round(ann.pred$net.result,0))
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred$V1)
t
ann.accuracy = (t[1,1]+t[2,2])/(t[1,1]+t[1,2]+t[2,1]+t[2,2])
#Selecting the right variables
ann.WAUS.train
ann.WAUS.train
ann.WAUS.train = ann.WAUS.train[-c(1:2,4:12,14:15,48)]
ann.WAUS.train
ann.WAUS.train = WAUS.train
ann.WAUS.test = WAUS.test
ann.WAUS.trainmm = as.data.frame(model.matrix(~WindDir3pm+WindDir9am+RainToday+WindGustDir, data = ann.WAUS.train))
ann.WAUS.testmm = as.data.frame(model.matrix(~WindDir3pm+WindDir9am+RainToday+WindGustDir, data = ann.WAUS.test))
ann.WAUS.train = cbind(ann.WAUS.train,ann.WAUS.trainmm)
ann.WAUS.test = cbind(ann.WAUS.test,ann.WAUS.testmm)
ann.WAUS.test
ann.WAUS.train = ann.WAUS.train[,c(1:5,7,10:17,19,20,22:(ncol(ann.WAUS.train)))]
ann.WAUS.test = ann.WAUS.test[,c(1:5,7,10:17,19,20,22:(ncol(ann.WAUS.test)))]
ann.WAUS.train
ann.WAUS.train = ann.WAUS.train[-c(1:2,4:12,14:15,47)]
ann.WAUS.train
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 6)
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 6)
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 3)
ann.pred = compute(ann, ann.WAUS.test)
ann.pred
ann.pred = as.data.frame(round(ann.pred$net.result,0))
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred$V1)
t
ann.accuracy = (t[1,1]+t[2,2])/(t[1,1]+t[1,2]+t[2,1]+t[2,2])
ann.accuracy
ann.WAUS.train = WAUS.train
ann.WAUS.test = WAUS.test
ann.WAUS.trainmm = as.data.frame(model.matrix(~WindDir3pm+WindDir9am+RainToday+WindGustDir, data = ann.WAUS.train))
ann.WAUS.testmm = as.data.frame(model.matrix(~WindDir3pm+WindDir9am+RainToday+WindGustDir, data = ann.WAUS.test))
ann.WAUS.train = cbind(ann.WAUS.train,ann.WAUS.trainmm)
ann.WAUS.test = cbind(ann.WAUS.test,ann.WAUS.testmm)
ann.WAUS.test
ann.WAUS.train = ann.WAUS.train[,c(1:5,7,10:17,19,20,22:(ncol(ann.WAUS.train)))]
ann.WAUS.test = ann.WAUS.test[,c(1:5,7,10:17,19,20,22:(ncol(ann.WAUS.test)))]
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 3)
ann.pred = compute(ann, ann.WAUS.test)
ann.pred
ann.pred = as.data.frame(round(ann.pred$net.result,0))
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred$V1)
t
ann.WAUS.train = ann.WAUS.train[-c(1:2,4:12,14:15,47)]
ann.WAUS.test = ann.WAUS.test[-c(1:2,4:12,14:15,47)]
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 3)
ann.pred = compute(ann, ann.WAUS.test)
ann.pred
ann.pred = as.data.frame(round(ann.pred$net.result,0))
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred$V1)
t
ann.accuracy = (t[1,1]+t[2,2])/(t[1,1]+t[1,2]+t[2,1]+t[2,2])
ann.accuracy
ann.WAUS.train = WAUS.train
ann.WAUS.test = WAUS.test
ann.WAUS.trainmm = as.data.frame(model.matrix(~WindDir3pm+WindDir9am+RainToday+WindGustDir, data = ann.WAUS.train))
ann.WAUS.testmm = as.data.frame(model.matrix(~WindDir3pm+WindDir9am+RainToday+WindGustDir, data = ann.WAUS.test))
ann.WAUS.train = cbind(ann.WAUS.train,ann.WAUS.trainmm)
ann.WAUS.test = cbind(ann.WAUS.test,ann.WAUS.testmm)
ann.WAUS.test
ann.WAUS.train = ann.WAUS.train[,c(1:5,7,10:17,19,20,22:(ncol(ann.WAUS.train)))]
ann.WAUS.test = ann.WAUS.test[,c(1:5,7,10:17,19,20,22:(ncol(ann.WAUS.test)))]
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 3)
ann.pred = compute(ann, ann.WAUS.test)
ann.pred
ann.pred = as.data.frame(round(ann.pred$net.result,0))
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred$V1)
t
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 5)
ann.pred = compute(ann, ann.WAUS.test)
ann.pred
ann.pred = as.data.frame(round(ann.pred$net.result,0))
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred$V1)
t
accuracy = 212/(212+242)
accuracy
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 5)
ann.pred = compute(ann, ann.WAUS.test)
ann.pred
ann.pred = round(ann.pred$net.result,0)
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred)
ann.pred
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred$1)
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 5)
ann.pred = compute(ann, ann.WAUS.test)
ann.pred = as.data.frame(round(ann.pred$net.result,0))
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred$V1)
t
accuracy = 212/(212+242)
accuracy
accuracy =  t[1,1]/(t[1,1]+t[0,1])
accuracy
t[1,1]
t[0,1]
accuracy =  t[1,1]/(t[1,1]+t[1,0])
accuracy =  t[1,1]/(t[1,1]+t[1,0])
accuracy
t[1,0]
t[0,1]
t
t[1,1]
t[1,2]
t[2,1]
accuracy =  t[2,1]/(t[1,1]+t[2,1])
accuracy
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 5)
ann.pred = compute(ann, ann.WAUS.test)
ann.pred = as.data.frame(round(ann.pred$net.result,0))
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred$V1)
t
accuracy =  t[2,1]/(t[1,1]+t[2,1])
accuracy
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred[,2])
t
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 5)
ann.pred = compute(ann, ann.WAUS.test)
ann.pred = as.data.frame(round(ann.pred$net.result,0))
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred[,2])
t
accuracy =  t[2,1]/(t[1,1]+t[2,1])
accuracy
#Selecting a few variables
ann.WAUS.train = ann.WAUS.train[-c(1:2,4:12,14:15,47)]
ann.WAUS.test = ann.WAUS.test[-c(1:2,4:12,14:15,47)]
ann = neuralnet(MHT ~ ., data = ann.WAUS.train, hidden = 5)
ann.pred = compute(ann, ann.WAUS.test)
ann.pred
ann.pred = as.data.frame(round(ann.pred$net.result,0))
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred$V1)
t
ann.accuracy = (t[1,1]+t[2,2])/(t[1,1]+t[1,2]+t[2,1]+t[2,2])
ann.accuracy
# Q1
#proportion of days where it is more humid tomorrow compared to it is lesser
more_humid = WAUS[WAUS$MHT == 1,]
dim(more_humid) # 946 rows
ann.pred
ann.pred = as.data.frame(round(ann.pred$net.result,0))
t = table(observed = ann.WAUS.test$MHT, predicted = ann.pred$V1)
t
ann.accuracy = (t[1,1]+t[2,2])/(t[1,1]+t[1,2]+t[2,1]+t[2,2])
ann.accuracy
ann.pred = compute(ann, ann.WAUS.test)
ann.pred
prob = ann.pred$net.result
pred = ifelse(prob>0.5, 1, 0)
pred
t = table(observed = ann.WAUS.test$MHT, predicted = pred)
t = table(observed = ann.WAUS.test$MHT, predicted = pred[,1])
t
ann.accuracy = (t[1,1]+t[2,2])/(t[1,1]+t[1,2]+t[2,1]+t[2,2])
ann.accuracy
