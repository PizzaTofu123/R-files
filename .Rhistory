#3.4
z = -3.9226
p = 2*pnorm(-abs(z))
print(p)
#3.2
m = 176
n = 240
theta.hat = m/n
theta.0 = 1/2
z.0 = (theta.hat - theta.0) / sqrt(theta.0*(1-theta.0)/n)
z.1 = 0.2333/0.0327
p = 2*pnorm(-abs(z.0))
p
z.1 = 0.2333/0.0327
z.1
#3.4
z = -3.9226
p = 2*pnorm(-abs(z))
print(p)
#2.1
calcP <- function(v,r) # function used to calculate the probability of each probability
# takes in the v and r variables as input
{
y <- c(0:25)
p = choose(y+r-1,y) * (r ** r) * (exp(v) + r)**(-r-y)*exp(y*v) # the formula used to calculate p
}
y <- c(0:25) # initialize y as a collection from 0 to 25
plot(y,calcP(0,1),type ='l', col = 'red', xlab = 'Number of tails', ylab ='Probability',
main = 'Plot of the negative binomial probability mass function') # plotting
lines(y,calcP(1,2),col = 'black')
lines(y,calcP(1.5,2), col = 'blue')
legend("topright", legend=c("v = 0, r = 1", "v = 1, r = 2", "v = 1.5, 2"),
col=c("red", "black", "blue"), lty=1:2, cex=0.8)
#3.2
m = 176 # number of successes
n = 240 # total number of test
theta.hat = m/n # the sample mean
theta.0 = 1/2 # the null hypothesis sample mean
z.0 = (theta.hat - theta.0) / sqrt(theta.0*(1-theta.0)/n) # the z score
p = 2*pnorm(-abs(z.0))
p
w <-c(9, 16, “monkey”)
w <-c(9, 16, "monkey")
class(w)
iris
i = iris
iris #
library(tree)
library(e1071)
library(ROCR)
library(rpart)
library(ggplot2)
#install.packages("gridExtra")
library("gridExtra") # used to arrange ggplots
#install.packages("adabag")
library(adabag)
install.packages("caret")
#install.packages("adabag")
library(adabag)
#install.packages("adabag")
library(adabag)
#install.packages("adabag")
library(caret)
library(adabag)
install.packages(c("bit", "blob", "boot", "broom", "bslib", "cachem", "callr", "checkmate", "class", "cli", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "flexmix", "forcats", "foreign", "fs", "gargle", "glmnet", "googledrive", "googlesheets4", "gtable", "haven", "highr", "Hmisc", "hms", "htmltools", "httr", "igraph", "isoband", "jsonlite", "KernSmooth", "knitr", "lattice", "lubridate", "maps", "markdown", "MASS", "Matrix", "mclust", "mgcv", "modelr", "nlme", "nnet", "openssl", "processx", "ps", "purrr", "Rcpp", "RcppEigen", "readr", "readxl", "rmarkdown", "rpart", "sass", "spatial", "stringi", "survival", "sys", "tibble", "tidyverse", "tinytex", "utf8", "viridis", "viridisLite", "vroom", "waldo", "xfun", "xml2", "yaml"))
#install.packages("adabag")
library(caret)
library(adabag)
library(adabag)
#install.packages("adabag")
library(tibble)
library(adabag)
install.packages("tibble")
library(adabag)
install.packages("tibble")
library(adabag)
library(rpart)
library(adabag)
install.packages("adabag")
library(adabag)
library(caret)
library(tidyverse)
install.packages("tibble")
library(e1071)
library(ROCR)
library(rpart)
library(tree)
library(e1071)
library(ROCR)
library(rpart)
library(ggplot2)
#install.packages("gridExtra")
library("gridExtra") # used to arrange ggplots
#install.packages("adabag")
library(tibble)
library(adabag)
bagging
n = 10
s = seq(0,10)
alpha = 0
theta.hat = s + alpha/n + (2*alpha)
n = 10
s = seq(0,10)
alpha = 0.5
theta.hat = s + alpha/n + (2*alpha)
n = 10
s = seq(0,10)
alpha = 0
theta.hat = s + alpha/n + (2*alpha)
theta.hat
n = 10
s = seq(0,10)
alpha = 0.5
theta.hat = s + alpha/n + (2*alpha)
theta.hat
n = 10
s = seq(0,10)
alpha = 0
theta.hat = (s + alpha)/(n + 2*alpha)
theta.hat
n = 10
s = seq(0,10)
alpha = 0.5
theta.hat = (s + alpha)/(n + 2*alpha)
theta.hat
# Binomial risk function for smoothed estimator of proportion
# FIT3154 Studio 2
bin.risk <- function(alpha, n)
{
# Make a grid of true population proportion (theta) values
theta = seq(0,1,length.out=1e3)
# Evaluate the bias and variance at each true population parameter
bias = alpha*(2*theta-1)/(2*alpha+n)
var  = n*(1-theta)*theta/(2*alpha+n)^2
# Return the theta values and corresponding risks
rv = list()
rv$theta = theta
rv$risk = bias^2 + var
return(rv)
}
# Binomial risk function for smoothed estimator of proportion
# FIT3154 Studio 2
bin.risk <- function(alpha, n)
{
# Make a grid of true population proportion (theta) values
theta = seq(0,1,length.out=1e3)
# Evaluate the bias and variance at each true population parameter
bias = alpha*(2*theta-1)/(2*alpha+n)
var  = n*(1-theta)*theta/(2*alpha+n)^2
# Return the theta values and corresponding risks
rv = list()
rv$theta = theta
rv$risk = bias^2 + var
return(rv)
}
rv=bin.risk(alpha=0, n=10)
plot(rv$theta,rv$risk,type="l")
rv=bin.risk(alpha=1/2, n=10)
lines(rv$theta,rv$risk,col="red")
n = 10
s = seq(0,10)
alpha = sqrt(n)/2
theta.hat = (s + alpha)/(n + 2*alpha)
theta.hat
rv=bin.risk(alpha=0, n=10)
plot(rv$theta,rv$risk,type="l")
rv=bin.risk(alpha=1/2, n=10)
lines(rv$theta,rv$risk,col="red")
# theta at 0.5 is highest risk because the observation is
# going to be extremely random pr 50-50
rv=bin.risk(alpha=0, n=10)
plot(rv$theta,rv$risk,type="l")
rv=bin.risk(alpha=1/2, n=10)
lines(rv$theta,rv$risk,col="red")
rv=bin.risk(alpha=0, n=10)
lines(rv$theta, col = "green")
n = 10
s = seq(0,10)
alpha = sqrt(n)/2
theta.hat = (s + alpha)/(n + 2*alpha)
theta.hat
rv=bin.risk(alpha=0, n=10)
lines(rv$theta, col = "green")
lines(rv$theta, rv$risk, col = "green")
rv=bin.risk(alpha, n)
lines(rv$theta, rv$risk, col = "green")
# theta at 0.5 is highest risk because the observation is
# going to be extremely random pr 50-50
rv=bin.risk(alpha=0, n=10)
plot(rv$theta,rv$risk,type="l")
rv=bin.risk(alpha=1/2, n=10)
lines(rv$theta,rv$risk,col="red")
n = 10
s = seq(0,10)
alpha = sqrt(n)/2
theta.hat = (s + alpha)/(n + 2*alpha)
theta.hat
rv=bin.risk(alpha, n)
lines(rv$theta, rv$risk, col = "green")
n = 100
s = seq(0,10)
alpha = sqrt(n)/2
theta.hat = (s + alpha)/(n + 2*alpha)
theta.hat
rv=bin.risk(alpha, n)
lines(rv$theta, rv$risk, col = "blue")
rv=bin.risk(alpha=sqrt(n)/2, n=100)
lines(rv$theta,rv$risk,col="blue")
# theta at 0.5 is highest risk because the observation is
# going to be extremely random pr 50-50
rv=bin.risk(alpha=0, n=10)
plot(rv$theta,rv$risk,type="l")
rv=bin.risk(alpha=1/2, n=10)
lines(rv$theta,rv$risk,col="red")
n = 10
s = seq(0,10)
alpha = sqrt(n)/2
theta.hat = (s + alpha)/(n + 2*alpha)
theta.hat
rv=bin.risk(alpha, n)
lines(rv$theta, rv$risk, col = "green")
rv=bin.risk(alpha=sqrt(n)/2, n=100)
lines(rv$theta,rv$risk,col="blue")
rv=bin.risk(alpha=0, n=100)
plot(rv$theta,rv$risk,type="l")
rv=bin.risk(alpha=sqrt(n)/2, n=100)
lines(rv$theta,rv$risk,col="blue")
rv=bin.risk(alpha=0, n=100)
plot(rv$theta,rv$risk,type="l")
rv=bin.risk(alpha=1/2, n=100)
lines(rv$theta,rv$risk,col="red")
rv=bin.risk(alpha=sqrt(n)/2, n=100)
lines(rv$theta,rv$risk,col="blue")
sigma2 = 1
sigma2.hat = seq(0.1, 10, length.out=1e3)
kl = (1/2)*log(sigma2.hat/sigma2) + sigma2/2/sigma2.hat - 1/2
plot(sigma2.hat, kl, type="l")
4
sigma2 = 2
sigma2.hat = seq(0.1, 10, length.out=1e3)
kl = (1/2)*log(sigma2.hat/sigma2) + sigma2/2/sigma2.hat - 1/2
lines(sigma2.hat, kl, type="l", col = "red")
# Approximate risk using simulation
normal.kl.risk <- function(mu, sigma2, n, k = 0, m = 1e5)
{
# To store the KL divergences for each iteration of the simulation
kl = matrix(0, m, 1)
# Do 'm' iterations
for (i in 1:m)
{
# Generate a sample from our population, i.e., y1,...,yn ~ N(mu, sigma2)
y = rnorm(n, mean = mu, sd = sqrt(sigma2))
# Estimate mu and sigma2 from the sample
mu.hat = mean(y)
sigma2.hat = sum((y-mu.hat)^2) / (n-k)
# Compute KL divergence for these estimates
kl[i] = (1/2)*log(sigma2.hat/sigma2) + sigma2/2/sigma2.hat + (mu-mu.hat)^2/2/sigma2.hat - 1/2
}
# Average the KL divergences for the 'm' simulations to estimate the risk (average/expected loss)
return(mean(kl))
}
# Exact formula for the risk
normal.kl.risk.exact <- function(n, k=0)
{
return( (1/2)*(digamma((n-1)/2) + log(2/(n-k))) + (n+1)*(n-k)/2/(n-3)/n - 1/2 )
}
normal.kl.risk(mu=0,sigma2=1,n=10,k=0,m=1e6)
normal.kl.risk(mu=0,sigma2=1,n=10,k=1,m=1e6)
normal.kl.risk(mu=0,sigma2=1,n=10,k=2,m=1e6)
normal.kl.risk(mu=0,sigma2=1,n=10,k=3,m=1e6)
normal.kl.risk(mu=0,sigma2=1,n=10,k=4,m=1e6)
normal.kl.risk(mu=0,sigma2=1,n=10,k=5,m=1e6)
#2.6
normal.kl.risk.exact(n=100,k=0)
normal.kl.risk.exact(n=100,k=1)
#2.7
normal.kl.risk.exact(n=10,k=0)
normal.kl.risk.exact(n=10,k=1)
normal.kl.risk.exact(n=100,k=0)
normal.kl.risk.exact(n=100,k=1)
life
setwd("D:/Desktop/R files")
dev = read.csv("world_bank_development_indicators.csv",header=TRUE, check.names=FALSE)
dev$
dev = dev[dev$country != "Africa Eastern and Southern"
& dev$country != "Africa Western and Central"
& dev$country != "Arab World"
& dev$country != "Early-demographic dividend"
& dev$country != "East Asia & Pacific"
& dev$country != "East Asia & Pacific (IDA & IBRD countries)"
& dev$country != "East Asia & Pacific (excluding high income)"
& dev$country != "Euro Area"
& dev$country != "Europe & Central Asia"
& dev$country != "Europe & Central Asia (IDA & IBRD countries)"
& dev$country != "Europe & Central Asia (excluding high income countries)"
& dev$country != "European Union"
& dev$country != "Fragile and conflict affected situations"
& dev$country != "Heavily indebted poor countries (HIPC)"
& dev$country != "High income"
& dev$country != "IBRD only"
& dev$country != "IDA & IBRD total"
& dev$country != "IDA blend"
& dev$country != "IDA only"
& dev$country != "IDA total"
& dev$country != "Late-demographic dividend"
& dev$country != "Latin America & Caribbean"
& dev$country != "Low & middle income"
& dev$country != "Lower middle income"
& dev$country != "Upper middle income"
& dev$country != "Latin America & Caribbean (excluding high income)"
& dev$country != "Latin America & the Caribbean (IDA & IBRD countries)" &dev$country != "Least developed countries: UN classification" &
dev$country != "Middle East & North Africa" &dev$country != "Middle East & North Africa (IDA & IBRD countries)" &dev$country != "Middle East & North Africa (excluding high income)	" &
dev$country != "Middle income" & dev$country != "North America" &dev$country != "Not classified" &dev$country != "OECD members" &dev$country != "Other small states" &dev$country != "Pacific island small states" &
dev$country != "Post-demographic dividend" & dev$country != "Pre-demographic dividend" &dev$country != "South Asia" & dev$country != "South Asia (IDA & IBRD)" &dev$country != "Sub-Saharan Africa" &
dev$country != "Sub-Saharan Africa (IDA & IBRD countries)" & dev$country != "Sub-Saharan Africa (excluding high income)" & dev$country != "West Bank and Gaza",]
dev$year
dev[is.na(dev)] <- 0
dev = dev[dev$country == "Indonesia"
| dev$country == "World"
| dev$country == "Vietnam"
| dev$country == "Thailand"
| dev$country == "Malaysia"
| dev$country == "Philippines"
| dev$country == "Brunei"
| dev$country == "Myanmar"
| dev$country == "Thailand"
| dev$country == "Cambodia"
| dev$country == "Brunei Darussalam"
| dev$country == "Singapore"
,]
dev$year
dev$year = as.numeric(substr(dev$date,1,4))
dev$year
dev[is.na(dev)] <- 0
dev$year
dev
write.csv(dev, "D:\\Desktop\\R files\\world_bank_development_indicators_cleaned_No_NA_SEA.csv", row.names=FALSE)
dev$country == "Republic of China"
dev[dev$country,] == "Republic of China"
setwd("D:/Desktop/R files")
dev = read.csv("world_bank_development_indicators.csv",header=TRUE, check.names=FALSE)
dev$
dev = dev[dev$country != "Africa Eastern and Southern"
& dev$country != "Africa Western and Central"
& dev$country != "Arab World"
& dev$country != "Early-demographic dividend"
& dev$country != "East Asia & Pacific"
& dev$country != "East Asia & Pacific (IDA & IBRD countries)"
& dev$country != "East Asia & Pacific (excluding high income)"
& dev$country != "Euro Area"
& dev$country != "Europe & Central Asia"
& dev$country != "Europe & Central Asia (IDA & IBRD countries)"
& dev$country != "Europe & Central Asia (excluding high income countries)"
& dev$country != "European Union"
& dev$country != "Fragile and conflict affected situations"
& dev$country != "Heavily indebted poor countries (HIPC)"
& dev$country != "High income"
& dev$country != "IBRD only"
& dev$country != "IDA & IBRD total"
& dev$country != "IDA blend"
& dev$country != "IDA only"
& dev$country != "IDA total"
& dev$country != "Late-demographic dividend"
& dev$country != "Latin America & Caribbean"
& dev$country != "Low & middle income"
& dev$country != "Lower middle income"
& dev$country != "Upper middle income"
& dev$country != "Latin America & Caribbean (excluding high income)"
& dev$country != "Latin America & the Caribbean (IDA & IBRD countries)" &dev$country != "Least developed countries: UN classification" &
dev$country != "Middle East & North Africa" &dev$country != "Middle East & North Africa (IDA & IBRD countries)" &dev$country != "Middle East & North Africa (excluding high income)	" &
dev$country != "Middle income" & dev$country != "North America" &dev$country != "Not classified" &dev$country != "OECD members" &dev$country != "Other small states" &dev$country != "Pacific island small states" &
dev$country != "Post-demographic dividend" & dev$country != "Pre-demographic dividend" &dev$country != "South Asia" & dev$country != "South Asia (IDA & IBRD)" &dev$country != "Sub-Saharan Africa" &
dev$country != "Sub-Saharan Africa (IDA & IBRD countries)" & dev$country != "Sub-Saharan Africa (excluding high income)" & dev$country != "West Bank and Gaza",]
dev$year
dev[is.na(dev)] <- 0
dev = dev[dev$country == "Indonesia"
| dev$country == "World"
| dev$country == "Vietnam"
| dev$country == "Thailand"
| dev$country == "Malaysia"
| dev$country == "Philippines"
| dev$country == "Brunei"
| dev$country == "Myanmar"
| dev$country == "Thailand"
| dev$country == "Cambodia"
| dev$country == "Singapore"
,]
write.csv(dev, "D:\\Desktop\\R files\\world_bank_development_indicators_cleaned_No_NA_SEA.csv", row.names=FALSE)
dev_no_na = read.csv("world_bank_development_indicators_cleaned_No_NA.csv.csv",header=TRUE, check.names=FALSE)
dev_no_na = read.csv("world_bank_development_indicators_cleaned_No_NA.csv",header=TRUE, check.names=FALSE)
dev_no_na[dev$country == "Lower middle income", ]
dev_map = read.csv("world_bank_development_indicators_cleaned_MAP.csv",header=TRUE, check.names=FALSE)
dev_map[dev_map$country == 'Brunei Darussalam']
dev_map[dev_map$country == 'Brunei Darussalam',]
dev_map[dev_map$country == 'Brunei Darussalam',]$country = 'Brunei'
dev_map[dev_map$country == 'Brunei Darussalam',]
dev_map[dev_map$country == 'Brunei',]
write.csv(dev, "D:\\Desktop\\R files\\world_bank_development_indicators_cleaned_MAP.csv", row.names=FALSE)
write.csv(dev_map, "D:\\Desktop\\R files\\world_bank_development_indicators_cleaned_MAP.csv", row.names=FALSE)
dev_no_na$year
dev_no_na = dev_no_na[dev$country == "Indonesia"
| dev$country == "World"
| dev$country == "Vietnam"
| dev$country == "Thailand"
| dev$country == "Malaysia"
| dev$country == "Philippines"
| dev$country == "Brunei"
| dev$country == "Myanmar"
| dev$country == "Thailand"
| dev$country == "Cambodia"
| dev$country == "Singapore"
,]
write.csv(dev_no_na, "D:\\Desktop\\R files\\world_bank_development_indicators_cleaned_No_NA_SEA.csv", row.names=FALSE)
dev_no_na
dev_no_na = dev_no_na[dev$country == "Indonesia"
| dev$country == "World"
| dev$country == "Vietnam"
| dev$country == "Thailand"
| dev$country == "Malaysia"
| dev$country == "Philippines"
| dev$country == "Brunei"
| dev$country == "Myanmar"
| dev$country == "Thailand"
| dev$country == "Cambodia"
| dev$country == "Singapore"
,]
dev_no_na
dev_no_na = dev_no_na[dev_no_na$country == "Indonesia"
| dev_no_na$country == "World"
| dev_no_na$country == "Vietnam"
| dev_no_na$country == "Thailand"
| dev_no_na$country == "Malaysia"
| dev_no_na$country == "Philippines"
| dev_no_na$country == "Brunei"
| dev_no_na$country == "Myanmar"
| dev_no_na$country == "Thailand"
| dev_no_na$country == "Cambodia"
| dev_no_na$country == "Singapore"
,]
write.csv(dev_no_na, "D:\\Desktop\\R files\\world_bank_development_indicators_cleaned_No_NA_SEA.csv", row.names=FALSE)
dev_no_na
dev_no_na$country
dev_no_na[dev_no_na$country == 'Singapore']
dev_no_na[dev_no_na$country == 'Singapore',]
dev_no_na[dev_no_na$country == 'Singapore' & dev_no_na$year==2021,]
dev_no_na[dev_no_na$country == 'Brunei' & dev_no_na$year==2021,]
dev_no_na = read.csv("world_bank_development_indicators_cleaned_No_NA.csv",header=TRUE, check.names=FALSE)
dev_no_na = dev_no_na[dev_no_na$country == "Indonesia"
| dev_no_na$country == "World"
| dev_no_na$country == "Vietnam"
| dev_no_na$country == "Thailand"
| dev_no_na$country == "Malaysia"
| dev_no_na$country == "Philippines"
| dev_no_na$country == "Brunei"
| dev_no_na$country == "Myanmar"
| dev_no_na$country == "Thailand"
| dev_no_na$country == "Cambodia"
| dev_no_na$country == "Singapore"
,]
dev_no_na[dev_no_na$country == 'Brunei' & dev_no_na$year==2021,]
dev_no_na[dev_no_na$country == 'Brunei Darussalam' & dev_no_na$year==2021,]
dev_no_na[dev_no_na$country == 'Brunei Darussalam',]
dev_no_na[dev_no_na$country == 'Brunai Darussalam',]
dev_no_na = read.csv("world_bank_development_indicators_cleaned_No_NA.csv",header=TRUE, check.names=FALSE)
dev_no_na[dev_no_na$country == 'Brunei Darussalam',]
dev_no_na[dev_no_na$country == 'Brunei Darussalam',]$country = 'Brunei'
dev_no_na[dev_no_na$country == 'Brunei Darussalam',]
dev_no_na[dev_no_na$country == 'Brunei',]
dev_no_na = dev_no_na[dev_no_na$country == "Indonesia"
| dev_no_na$country == "World"
| dev_no_na$country == "Vietnam"
| dev_no_na$country == "Thailand"
| dev_no_na$country == "Malaysia"
| dev_no_na$country == "Philippines"
| dev_no_na$country == "Brunei"
| dev_no_na$country == "Myanmar"
| dev_no_na$country == "Thailand"
| dev_no_na$country == "Cambodia"
| dev_no_na$country == "Singapore"
,]
dev_no_na[dev_no_na$country == 'Brunei' & dev_no_na$year==2021,]
write.csv(dev_no_na, "D:\\Desktop\\R files\\world_bank_development_indicators_cleaned_No_NA_SEA.csv", row.names=FALSE)
dev_no_na = read.csv("world_bank_development_indicators_cleaned_No_NA.csv",header=TRUE, check.names=FALSE)
dev_no_na[dev_no_na[dev_no_na$country == 'Lao PDR',]
dev_no_na[dev_no_na$country == 'Lao PDR',]
dev_no_na[dev_no_na$country == 'Brunei' & dev_no_na$year==2021,]
dev_no_na[dev_no_na$country == 'Brunei',]
dev_no_na[dev_no_na$country == 'Brunei Darussalam',]
dev_no_na[dev_no_na$country == 'Lao PDR',]
dev_no_na[dev_no_na$country == 'Lao PDR',]$country = 'Laos'
dev_no_na = dev_no_na[dev_no_na$country == "Indonesia"
| dev_no_na$country == "World"
| dev_no_na$country == "Vietnam"
| dev_no_na$country == "Thailand"
| dev_no_na$country == "Malaysia"
| dev_no_na$country == "Philippines"
| dev_no_na$country == "Brunei"
| dev_no_na$country == "Myanmar"
| dev_no_na$country == "Thailand"
| dev_no_na$country == "Cambodia"
| dev_no_na$country == "Singapore"
| dev_no_na$country == "Laos"
| dev_no_na$country == "Timor-Leste"
,]
dev_no_na[dev_no_na$country == 'Timor-Leste' & dev_no_na$year==2021,]
write.csv(dev_no_na, "D:\\Desktop\\R files\\world_bank_development_indicators_cleaned_No_NA_SEA.csv", row.names=FALSE)
dev_no_na = read.csv("world_bank_development_indicators_cleaned_MAP.csv",header=TRUE, check.names=FALSE)
dev_no_na[dev_no_na$country == 'Lao PDR',]$country = 'Laos'
write.csv(dev_no_na, "D:\\Desktop\\R files\\world_bank_development_indicators_cleaned_MAP.csv", row.names=FALSE)
dev_no_na = read.csv("world_bank_development_indicators_cleaned_MAP.csv",header=TRUE, check.names=FALSE)
dev_no_na[dev_no_na$country == 'Lao PDR',]
dev_no_na[dev_no_na$country == 'Laos',]
